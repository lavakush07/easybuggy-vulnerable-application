name: Combined Workflow for SLSA Provenance, SBOM, and Policy Enforcement

on:
  workflow_dispatch:
  release:
    types: [created]

jobs:
  combined-workflow:
    runs-on: ubuntu-latest
    env:
      HARNESS_ACCOUNT_URL: 'https://app.harness.io'
      HARNESS_ACCOUNT_ID: 'vpCkHKsDSxK9_KYfjCTMKA'
      HARNESS_ORG_ID: 'SSCA'
      HARNESS_PROJECT_ID: 'Exploratory'
      HARNESS_API_KEY: ${{ secrets.SCS_API_KEY }}

    steps:
      # Step 1: Checkout the main repository
      - name: Checkout Main Repository
        uses: actions/checkout@v3

      # Step 2: Clone Additional Repository
      - name: Clone Additional Repository
        run: |
          git clone https://github.com/easybuggy-vulnerable-application
          echo "Cloned additional repository: docker-nginx"
      
      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Set Registry Environment Variables
      - name: Set Vault Environment Variables
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV
      # Step 5: Build and Tag Docker Image
      - name: Build and Tag Docker Image
        run: |
          cd docker-nginx
          docker build -t lavakush07/easy-buggy-app:GHA1 -f ./stable/alpine/Dockerfile .
          echo "Docker image built and tagged as kartikey366/nginx-private:github-actions."
      # Step 6: Push the Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push lavakush07/easy-buggy-app:GHA1
          echo "Docker image pushed to Docker Hub."
      # Step 7: Log in to Vault
      - name: Log in to Vault
        uses: hashicorp/vault-action@v2
        id: vault_login
        with:
          url: ${{ secrets.VAULT_URL }}
          method: token
          token: ${{ secrets.VAULT_TOKEN }}
          outputToken: true

      # Step 8: Verify Vault Login and Print Token
      - name: Verify Vault Login and Print Token
        run: |
          echo "Vault login successful."
          echo "Vault Token: ${{ steps.vault_login.outputs.token }}"
        env:
          VAULT_TOKEN: ${{ steps.vault_login.outputs.token }}  # Ensuring token is accessible

      # Step 9: Set Vault Environment Variables
      - name: Set Vault Environment Variables
        run: |
          echo "VAULT_ADDR=${{ secrets.VAULT_URL }}" >> $GITHUB_ENV
          echo "VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}" >> $GITHUB_ENV
      # Step 10: Run SLSA Provenance Action
      # - name: Run SLSA Provenance Action
      #   uses: ./slsa-generation
      #   with:
      #     TARGET: 'kartikey366/nginx-private:github-actions'
      #     ATTEST: true
      #     KMS_KEY: 'cosign'

      # Step 11: Run SLSA Provenance Action
      # -  name: SLSA Verification
      #    uses: ./slsa-verification
      #    with:
      #      TARGET: 'kartikey366/nginx-private:github-actions'
      #      VERIFY: true
      #      KMS_KEY: 'cosign'

      # Step 12: Run SBOM Orchestration Action
      - name: Run SBOM Orchestration Action
        uses: ./sbom-generation
        with:
          TOOL: 'Syft'
          FORMAT: 'spdx-json'
          TARGET: 'lavakush07/easy-buggy-app:GHA1'
          ATTEST: true
          KMS_KEY: 'cosign'

      # Step 13: Run SBOM Policy Enforcement Action
      - name: Run SBOM Policy Enforcement Action
        uses: ./sbom-policy-enforcement
        with:
          TARGET: 'lavakush07/easy-buggy-app:GHA1'
          VERIFY: true
          KMS_KEY: 'cosign'
          POLICY_SET_REF: 'opa_policy_set_for_at'


      

